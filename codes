//    QUESTION :01 check element is presnet ot not

// #include <iostream>
// using namespace std;
// bool getSum(int arr[],int size,int element)
// {
//     // base case
//     if(size == 0)return false;
//     if(arr[0] == element)return true;
//     bool remain = getSum(arr+1, size-1,element);
//     return remain;

// }
// int main()
// {
//     int arr[5] ={1,2,3,4,5};
//     int size = 5;
//     bool ans = getSum(arr,size,37);
//    if(ans)std::cout << "ans is present" << std::endl;
//    else
//    {
//        cout << "ans is absent" <<endl;
//    }
// }

// QUESTION :02 To find sum of elements in array

// #include <iostream>
// using namespace std;

// int solve(int arr[], int size,int sum)
// {
//     if(size == 0)return 0;
//     if(size == 1 )return arr[0];
//     sum =arr[0] + solve(arr,size-1,sum);
//     return sum;
// }
// int main()
// {
//     int arr[1,3,5,6,2];
//     int size = 5;
//     int sum = solve(arr,size);
//     cout<<"sum is "<<endl;
// }

// // QUESTION :03 binary search using recursion

// #include <iostream>
// using namespace std;

// bool binarySearch(int arr[], int s, int e, int element)
// {
//     int mid = s+(e-s)/2;
//     if(s>e)return false;
//     if(element == arr[mid])return true;
//     if(arr[mid]>element){
//         return binarySearch(arr,s,mid-1,element);
//     }
//     else{
//         return binarySearch(arr,mid+1,e,element);
//     }
// }
// int main()
// {
//     int arr[6] = {1,3,5,7,99,11};
//     int size = 6;
//     int start = 0 ,end = size - 1;
//     bool ans = binarySearch(arr,start,end,1);
//     if(ans)cout<<"element found"<<endl;
//     else {
//         cout<<"not found";
//     }
// }

// //QUESTION :04 power of number using recursion

// #include <iostream>
// using namespace std;

// int findPow(int a, int b)
// {
//     // base case
//     if(b == 0)return 1;
//     if(b ==1)return a;

//     int ans = findPow(a,b/2);

//     if(b%2 ==0) return ans*ans;
//     // odd power
//     else return ans*ans*a;

// }
// int main()
// {
//     int a = 2 , b =5;
//     int ans = findPow(a,b);
//     cout<<b<<" th "<<"power of "<<a<<" is : "<<ans<<endl;
// }

// QUESTION :05 BUBBLE SORT USING RECURSION

// #include<iostream>
// using namespace std;
// // we can pass by reference ot pointer because array is
//  void BubbleSort(int (&arr)[6], int i, int j, int size)
//  {
//     if(size == 1 || size == 0)return;
//     for(int i=0;i<j-1;i++)
//     {
//         if(arr[i]>arr[i+1])swap(arr[i],arr[i+1]);
//     }
//     BubbleSort(arr,i,j-1,size-1);
//  }
// int main()
// {
//     int arr[6] = {1,4,6,3,2,9};
//     int size = 6;
//     BubbleSort(arr,0,6,size);
//     for(int i=0;i<6;i++)
//     {
//         cout<<arr[i]<<" ";
//     }
// }

// QUESTION :06 MERGE SORT USING RECURSION

// #include <bits/stdc++.h>
// #include <vector>
// using namespace std;
// // merge function
// void merge(int (&arr)[6], int mid, int s, int e)
// {
//     int left = s;
//     int right = mid + 1;

//     // make a vector to merge sorted elements
//     vector<int> temp;
//     while (left <= mid && right <= e)
//     {
//         if (arr[left] <= arr[right])
//         {
//             temp.push_back(arr[left++]);
//         }
//         else
//         {
//             temp.push_back(arr[right++]);
//         }
//     }
//     while (left <= mid)
//     {
//         temp.push_back(arr[left++]);
//     }
//     while (right <= e)
//     {
//         temp.push_back(arr[right++]);
//     }
//     for (int i = 0; i < temp.size(); i++)
//     {
//         arr[s + i] = temp[i];
//     }
// }

// void mergeSort(int (&arr)[6], int size, int s, int e)
// {
//     // base case
//     if (s >= e)
//         return;
//     int mid = s + (e - s) / 2;
//     // left part
//     mergeSort(arr, size, s, mid);
//     // right part
//     mergeSort(arr, size, mid + 1, e);
//     merge(arr, mid, s, e);
// }
// int main()
// {
//     int arr[] = {2, 3, 5, 1, 44, 34};
//     int size = 6;

//     mergeSort(arr, size, 0, size - 1);
//     for (int i = 0; i < size; i++)
//     {
//         cout << arr[i] << " ";
//     }
// }

// QUESTION :07 skip paricular character to make a new desired string

// APPROACH 01 : PASS OUTPUT STRING INTO FUNCTION
// #include <bits/stdc++.h>
// using namespace std;
// void skip(string output, string original)
// {
//     if (original == "")
//     {
//         cout << output;
//         return;
//     }

//     char ch = original.at(0);
//     if (ch == 'a')
//     {
//         skip(output, original.substr(1));
//     }
//     else
//     {
//         skip(output + ch, original.substr(1));
//     }
// }
// int main()
// {
//     skip("", "abacdea");
//     return 0;
// }

// APPROACH 02: BUILDING OUTPUT STRING FOR EACH FUNCTION CALL

#include <bits/stdc++.h>
using namespace std;
string skip(string original)
{
    if (original == "")
    {

        return "";
    }

    char ch = original.at(0);
    if (ch == 'a')
    {
        return "" + skip(original.substr(1));
    }
    else
    {
        return ch + skip(original.substr(1));
    }
}
int main()
{
    cout << skip("abacdea");
    return 0;
}